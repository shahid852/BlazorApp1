@page "/"
@inject HttpClient Http
@rendermode InteractiveServer

<h3>Account Balance</h3>
<button class="btn btn-primary" preventDefault="True" @onclick="GetAccountDetails">Get Account Balance</button>
<p>Balance: @balance USD</p>


@code {

    private string balance = "5";

    // private async Task GetAccountDetails()
    // {
    //     Console.WriteLine("Button clicked!");
    //     // Simulate some work
    //     balance += "10";
    //     await Task.Delay(1000);
    // }

    private async Task GetAccountDetails()
    {
        balance = "wait";
        try
        {
            Console.WriteLine("Attempting to fetch account details...");

            var response = await Http.GetAsync("https://btcstakingapp.azurewebsites.net/api/acccount?email=shahan@autonicals.org"); // Adjust the URL as necessary

            //response.EnsureSuccessStatusCode();
            balance = "wait";
            StateHasChanged();  // Forces a re-render of the component

            var jsonString = await response.Content.ReadAsStringAsync();
            var accountDetails = System.Text.Json.JsonSerializer.Deserialize<AccountDetails>(jsonString);

            if (accountDetails != null)
            {
                balance = accountDetails.Balance.ToString();
            }
            else
            {
                balance = "null";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching account details: {ex.Message}");
            balance = ex.Message;
            // Consider adding user-friendly error handling and displaying it in the UI
        }
    }

    public class AccountDetails
    {
        public int Id { get; set; }
        public int CustomerId { get; set; }
        public string AccountType { get; set; }
        public decimal Balance { get; set; }
        public string Currency { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Status { get; set; }
    }

 }